#!/usr/bin/env python
# coding=utf-8
import re
import sys
import math
from sets import Set

# Decipher cosmic duke containers with known keys

keys = ["pHG5AS4deKLil9ADdR2BcA1hTNm0FQz3", "3Pf4GxTaDnx50qWe2Xz62uSptFsR3g3P",
        "AdjustKernelTableFromSSDTSpace2\x00", "FB7V61C7509E4L99BDZ7F74A79A69CDF"
        ]


# Functions
def getparam(count):
    if len(sys.argv) != count+1:
        print 'Crypt/Decrypt file with Cosmic Duke RC4'
        print 'To Use: ' + sys.argv[0] + ' my params'
        sys.exit(1)
    else:
        return sys.argv[1]


def shannon(data):
    fstList = list(data)
    falphabet = list(Set(fstList))  # list of symbols in the string
    ffreqList = []
    for fsymbol in falphabet:
            fctr = 0
            for fsym in fstList:
                if fsym == fsymbol:
                        fctr += 1
            ffreqList.append(float(fctr) / len(fstList))
    fent = 0.0
    for ffreq in ffreqList:
            fent = fent + ffreq * math.log(ffreq, 2)
    fent = -fent
    return fent


def rc4(key, data):
    key = bytearray(key)
    output = bytearray(data)
    k = range(256)
    j = 0
    for i in range(256):
        j = (j + k[i] + key[i % len(key)]) % 256
        k[i], k[j] = k[j], k[i]

    # Cosmic rc4 dont clear J
#   j = 0
    i = 0
    cipher_char = []
    for idx, char in enumerate(output):
        i = (i + 1) % 256
        j = (j + k[i]) % 256
        k[i], k[j] = k[j], k[i]
        keybyte = k[(k[i] + k[j]) % 256]
        output[idx] ^= keybyte

    return output


# Main Code #####
def main():
    filename = getparam(1)
    filedata = open(filename, "rb").read()
    print "Base entropy %s" % shannon(filedata)
    for key in keys:
        deciphered = rc4(key, filedata)
        print "Key %s, entropy :%s" % (key, shannon(deciphered))
        ofile = open(("%s_key_%s" % (filename, key[0:2])), "w")
        ofile.write(deciphered)
        ofile.close


if __name__ == '__main__':
    main()
